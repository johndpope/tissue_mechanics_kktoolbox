function [Y_TT, P_TT] = ylk_cos_sin_dthetatheta_bosh(phi, theta, L_max, P_T)
%% Pre-calculate the normalized associated Legendre functions
%% up to L = L_max

gdimp = size(phi,2);
gdimt = size(theta,1);
if (min(size(phi))==1 && min(size(theta))==1),
    phi = phi(:);
    theta = theta(:);
    Y_TT = zeros(gdimp,1, (L_max+1)^2);
else

    Y_TT = zeros(gdimt, gdimp, (L_max+1)^2);
    P_TT = zeros(gdimt, gdimp, (L_max+1)^2);
end

 
counter = 0;%
for L = 0:L_max
        p = ptt_gen(L,cos(theta), theta, 0);   
    for K = -L:L
        counter = counter + 1;
        NLK = N_LK(L,K);%NLK = sqrt((2 * L + 1)/(4*pi) * factorial(L - abs(K))/factorial(L + abs(K)));
        if K >= 0,
            Y_TT(:,:,counter) =  NLK * ptt(:,:, K+1).* cos(K.*phi);%
        elseif K < 0,
            Y_TT(:,:,counter) =  NLK.* ptt(:,:,abs(K)+1).* sin(abs(K).* phi);%
        end
     end
end

%%%%%%%%%%%%%%%%%%%%%%%%%
function p = ptt_gen(L,ct, theta, K)
%%% Calculate the derivative of the associated legendre functions using the
%%% recursion relations from Duncan and Olson '93
